{"version":3,"sources":["components/common/spinner/index.jsx","helpers/index.js","config.js","components/home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","className","apiUri","io","socket","receiveStream","url","cb","on","data","Home","useState","file","setFile","filename","setFilename","type","setType","selected","setSelected","progress","setProgress","link","setDownloadableLink","uploading","setUploading","downloading","setDownloading","selectElement","element","document","querySelector","add","classList","removed","remove","percent","toString","split","notify","timeout","title","animationType","message","position","useEffect","localStorage","getItem","confirm","text","buttonTitle","callback","setItem","downloadFile","a","fetch","method","then","blob","fileDownloader","onDragEnter","onFocus","onClick","onDragLeave","onBlur","onDrop","accept","onChange","target","files","name","multiple","e","value","style","pointerEvents","emit","sendStream","fileInfo","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fed83a4b.chunk.js","sourcesContent":["import React from 'react';\nimport \"./loader.css\"\n\nfunction Loader() {\n    return (\n        <span className=\"loader\"></span>\n    );\n}\n\nexport default Loader;\n","import socket from \"socket.io-client\";\nimport { API_HOST } from \"../config\";\nexport const apiUri = API_HOST;\nconst io = socket(apiUri);\n\nexport const sendStream = (url = \"\", data = {}) => {\n  io.emit(url, data);\n};\nexport const receiveStream = (url = \"\", cb) => {\n  return io.on(url, (data) => cb(data));\n};\n","export const API_HOST = \"http://83.136.252.39\";\n","import React, { useState } from \"react\";\nimport Loader from \"../common/spinner\";\nimport fileDownloader from \"js-file-download\";\nimport \"../common/convert.css\";\nimport { notify, confirm } from \"react-easy-notify\";\nimport \"react-easy-notify/dist/index.css\";\nimport { sendStream, receiveStream, apiUri } from \"../../helpers\";\nimport { useEffect } from \"react\";\nexport const Home = () => {\n  const [file, setFile] = useState(null);\n  const [filename, setFilename] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [selected, setSelected] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [link, setDownloadableLink] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [downloading, setDownloading] = useState(false);\n  const onChangeFile = ({ target }) => {\n    if (target.files && target?.files[0]) {\n      setFilename(target.files[0]?.name);\n      setFile(target.files);\n      setSelected(true);\n    }\n  };\n\n  const selectElement = (element) => document.querySelector(element);\n\n  const add = () => {\n    selectElement(\".file-drop-area\").classList.add(\"is-active\");\n  };\n  const removed = () => {\n    selectElement(\".file-drop-area\").classList.remove(\"is-active\");\n  };\n\n  const handleVideo = () => {\n    setUploading(true);\n    sendStream(\"video/upload\", { file: file[0], fileInfo: file, type });\n  };\n\n  receiveStream(\"video/progress\", function (data) {\n    setProgress(data.percent.toString());\n    if (data.percent.toString().split(\".\")[0] === \"100\") {\n      notify({\n        timeout: 5000,\n        title: \"success\",\n        type: \"success\",\n        animationType: \"pops-up\",\n        message: \"file is successfully uploaded\",\n        position: \"top-right\",\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accepted\") === \"false\")\n      confirm({\n        text:\n          \"Thanks for using our website to convert your videos, we would tell you that we will not store your videos after conversion so be sure about that. When you upload your video we start processing, after our api finishing conversion we delete the old video, then we wait until you download the new version of your video then we delete it after downloading is finished.\",\n        buttonTitle: \"I UNDERSTAND THAT\",\n        callback: () => {\n          localStorage.setItem(\"accepted\", \"true\");\n        },\n      });\n  }, []);\n\n  receiveStream(\"video/downloadable\", function (data) {\n    // console.log(data);\n    setDownloadableLink(data.filename);\n  });\n\n  const downloadFile = async () => {\n    setDownloading(true);\n    await fetch(`${apiUri}/${link}`, { method: \"GET\" })\n      .then((data) => data.blob())\n      .then((data) => {\n        fileDownloader(data, link);\n\n        setProgress(null);\n        setSelected(false);\n        setType(\"\");\n        setFile(null);\n        setDownloadableLink(null);\n        setFilename(\"\");\n        setDownloading(false);\n        setUploading(false);\n      });\n  };\n\n  return (\n    <div>\n      <main>\n        <div className=\"container\">\n          <div className=\"intro\">\n            <h2> Easily convert video </h2>\n            <br></br>\n            <h5> {filename}</h5>\n          </div>\n\n          <div className=\"choose-file\">\n            <div className=\"file\">\n              <div\n                className=\"input-file\"\n                onDragEnter={add}\n                onFocus={add}\n                onClick={add}\n                onDragLeave={removed}\n                onBlur={removed}\n                onDrop={removed}\n                // onChange={(e) => onChangeFile(e)}\n              >\n                <div className=\"file-drop-area\">\n                  <span className=\"fake-btn\">Choose files</span>\n                  <span className=\"file-msg\">or drag and drop files here</span>\n                  <input\n                    className=\"file-input\"\n                    type=\"file\"\n                    accept=\"video/*\"\n                    onChange={onChangeFile}\n                    multiple\n                  />\n                </div>\n              </div>\n            </div>\n\n            {selected && (\n              <div className=\"convert\">\n                <h2> to </h2>\n              </div>\n            )}\n            {selected && (\n              <div className=\"extension\">\n                <select\n                  className=\"custom-select\"\n                  onChange={(e) => setType(e.target.value)}\n                >\n                  <option value=\"mp4\">select converting type</option>\n                  <option value=\"mp4\">mp4</option>\n                  <option value=\"flv\">flv</option>\n                  <option value=\"webm\">webm</option>\n                  <option value=\"mp3\">mp3 (audio)</option>\n                </select>\n              </div>\n            )}\n          </div>\n\n          <div className=\"after-chose\">\n            {!link ? (\n              <div>\n                {type && !progress && (\n                  <button\n                    className=\"download\"\n                    onClick={handleVideo}\n                    style={{ pointerEvents: uploading ? \"none\" : \"unset\" }}\n                  >\n                    {\" \"}\n                    {uploading ? \"Uploading...\" : \"Upload Now\"}\n                  </button>\n                )}\n                {progress && (\n                  <div className=\"load\">\n                    <Loader />\n                    <p>\n                      {\" \"}\n                      {progress?.split(\".\")[0]} <span>%</span>{\" \"}\n                    </p>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <button\n                className=\"download\"\n                style={{ pointerEvents: downloading ? \"none\" : \"unset\" }}\n                onClick={downloadFile}\n              >\n                {\" \"}\n                {downloading ? \"Downloading...\" : \"Download Now\"}\n              </button>\n            )}\n          </div>\n        </div>\n      </main>\n\n      <footer>\n        <span>\n          Coding by{\" \"}\n          <a href=\"https://github.com/ElsiddigAhemd\">@Elsiddig Abdulmoniem</a>&\n          Designed by{\" \"}\n          <a href=\"https://www.facebook.com/abobakerhilal/\">@Abobaker Hilal</a>\n        </span>\n      </footer>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { EasyNotify } from \"react-easy-notify\";\nimport { Home } from \"./components/home\";\nfunction App() {\n  return (\n    <div>\n      <EasyNotify />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import { config } from \"dotenv\";\n// import socket from \"socket.io-client\";\n\n// const io = socket(\"http://localhost:6005?auth=bearer\");\n// io.on(\"hi\", (data) => console.log(data));\n\n// config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}